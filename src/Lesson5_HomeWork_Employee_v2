**
 *  * Java. Level 1. Lesson 5. Homework doing. Exc #1
 *  *
 *  * @autor @Dmitriy Solonnikov
 *  * @version dated Jun-14-2019
 *
 * Создать класс "Сотрудник" с полями: ФИО, должность, email, телефон, зарплата, возраст.
 * Конструктор класса должен заполнять эти поля при создании объекта.
 * Внутри класса «Сотрудник» написать метод, который выводит информацию об объекте в консоль.
 * Создать массив из 5 сотрудников.
 * С помощью цикла вывести информацию только о сотрудниках старше 40 лет.
 */

class Employee_Main {
    static int AGE_LIMIT = 40;

    public static void main(String[] args) {

        /** Решение с использованием массива **/

        Employee[] employeeList = new Employee[6]; // создан массив/объект из экземпляра класса Employee

        // созданы элементы массива
        employeeList[0] = new Employee(
                101, "Donatello", "engineer", "donatello@tmnt.com", 88003030901L, 20, 2000);
        employeeList[1] = new Employee(
                102, "Leonardo", "system administrator", "leonardo@tmnt.com", 88003030902L, 24, 2500);
        employeeList[2] = new Employee(
                103, "Michelangelo", "art designer", "michelangelo@tmnt.com", 88003030903L, 18, 1800);
        employeeList[3] = new Employee(
                104, "Rafael", "IS analyst", "rafael@tmnt.com", 88003030904L, 23, 1900);
        employeeList[4] = new Employee(
                105, "Splinter", "Team lead", "splinter@tmnt.com", 88003030905L, 60, 2100);
        employeeList[5] = new Employee(
                106, "Anatoliy", "Pizza delivery man", "delivery@pizza.com", 88003030911L, 45, 300);

// возвращает в консоль перечень элементов массива
        printList(employeeList); 

//      Вызов метода фильтрации списка по возрасту AGE_LIMIT
        compareAgeLimit(employeeList);

        /** конец **/
    }


//    Метод для способа с массивами

    static void printList (Employee [] employeeList) {

        System.out.println("Date of report: " + new Date().toString() + "\n");

        for (int i = 0; i < employeeList.length; i++) {
            employeeList[i].print();
        }
    }


// Метод сортировки Employee по возрасту AGE_LIMIT для варианта с массивом

    static void compareAgeLimit (Employee[] employeeList){

        int count = 0;

        System.out.println("Date of report: " + new Date().toString());
        System.out.println("Request autor name: " + System.getProperty("user.name") + "\n");
        System.out.println("The age of next workers is above the limit of " + AGE_LIMIT + " y.o. : \n");

        for (int  i = 0; i < employeeList.length; i++) {

            if (employeeList[i].getAge() > AGE_LIMIT){

                count ++;

                System.out.println(MessageFormat.format(
                        "# {0}    Employee ID: {0}, \n" +
                                "       Name: {1}, \n" +
                                "       Position: {2}, \n" +
                                "       Email: {3}, \n" +
                                "       Phone number: {4}, \n" +
                                "       Wage: {5} \n",
                        count, employeeList[i].getId(), employeeList[i].getName(),
                        employeeList[i].getPosition(), employeeList[i].getEmail(),
                        employeeList[i].getPhoneNumber(), employeeList[i].getWage(),
                        employeeList[i].getAge()
                ));
            }
        }

    }

}


/** Вложенный класс Employee **/

import java.text.MessageFormat;

class Employee {

    private int id;
    private String name;
    private String position;
    private String email;
    private long phoneNumber;
    private int wage;
    private int age;

// ----- Getters --------------------//
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getPosition() {
        return position;
    }

    public String getEmail() {
        return email;
    }

    public long getPhoneNumber() {
        return phoneNumber;
    }

    public int getWage() {
        return wage;
    }

    public int getAge() {
        return wage;
    }
// ----- Getters --------------------//


// ----- конструктор ----------------//

    public Employee(int id, String name, String position, String email, long phoneNumber, int wage, int age) {
        
        this.id = id;
        this.name = name;
        this.position = position;
        this.email = email;
        this.phoneNumber = phoneNumber;
        this.wage = wage;
        this.age = age;
    }
// ----- конструктор ----------------//


// этот метод передается в класс Employee_Main для способа с массивом

    void print () {
    
        System.out.println(MessageFormat.format(
                "Employee ID: {0}, \n" +
                                        "Name: {1}, \n" +
                                        "Position: {2}, \n" +
                                        "Email: {3}, \n" +
                                        "Phone number: {4}, \n" +
                                        "Wage: {5} \n",
                getId(), getName(), getPosition(), getEmail(), getPhoneNumber(), getWage(), getAge()
        ));
    }

}
